generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
  schemas  = ["dbo", "security"]
}

model Actions {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "Actions_unique_name") @db.VarChar(50)
  title_en          String              @db.VarChar(50)
  title_es          String              @db.VarChar(50)
  description_en    String?             @db.VarChar(255)
  description_es    String?             @db.VarChar(255)
  CustomPermissions CustomPermissions[]

  @@schema("security")
}

model CustomPermissions {
  roleId       Int
  permissionId Int
  actionId     Int
  Actions      Actions     @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CustomPermissions_action_fkey")
  Permissions  Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CustomPermissions_permission_fkey")
  Roles        Roles       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "CustomPermissions_role_fkey")

  @@id([roleId, permissionId, actionId])
  @@schema("security")
}

model Otps {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  otp       String   @db.VarChar(6)
  createdAt DateTime @default(now(), map: "DF__Otps__createdAt__1BB31344")
  expiresAt DateTime

  @@schema("security")
}

model Permissions {
  id                Int                 @id @default(autoincrement())
  parentId          Int?
  name              String              @unique(map: "Permissions_unique_name") @db.VarChar(100)
  title_en          String              @db.VarChar(100)
  title_es          String              @db.VarChar(100)
  description_en    String?             @db.VarChar(255)
  description_es    String?             @db.VarChar(255)
  CustomPermissions CustomPermissions[]
  Permissions       Permissions?        @relation("PermissionsToPermissions", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Permissions_parent_fkey")
  other_Permissions Permissions[]       @relation("PermissionsToPermissions")

  @@schema("security")
}

model Roles {
  id                             Int                 @id @default(autoincrement())
  type                           String              @db.VarChar(25)
  title_en                       String              @db.VarChar(50)
  title_es                       String              @db.VarChar(50)
  description_en                 String?             @db.VarChar(255)
  description_es                 String?             @db.VarChar(255)
  state                          Boolean
  createdAt                      DateTime            @default(now(), map: "DF__Roles__createdAt__07AC1A97")
  createdById                    Int?
  updatedAt                      DateTime?
  updatedById                    Int?
  CustomPermissions              CustomPermissions[]
  Users_Roles_createdByIdToUsers Users?              @relation("Roles_createdByIdToUsers", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Users_Roles_updatedByIdToUsers Users?              @relation("Roles_updatedByIdToUsers", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  UsersOnRoles                   UsersOnRoles[]

  @@schema("security")
}

model Users {
  id                                   Int            @id @default(autoincrement())
  firstName                            String         @db.VarChar(100)
  lastName                             String?        @db.VarChar(100)
  email                                String         @unique(map: "UQ__Users__AB6E6164DFFA68AF") @db.VarChar(50)
  phoneNumber                          String?        @db.VarChar(30)
  password                             String?        @db.VarChar(100)
  passwordVersion                      Int            @default(0, map: "DF__Users__passwordV__00FF1D08")
  incorrectPassword                    Int?           @default(0, map: "DF__Users__incorrect__01F34141")
  photo                                String?        @db.VarChar(255)
  refreshToken                         String?        @db.VarChar(4000)
  state                                Boolean
  createdAt                            DateTime       @default(now(), map: "DF__Users__createdAt__02E7657A")
  createdById                          Int?
  updatedAt                            DateTime?
  updatedById                          Int?
  Roles_Roles_createdByIdToUsers       Roles[]        @relation("Roles_createdByIdToUsers")
  Roles_Roles_updatedByIdToUsers       Roles[]        @relation("Roles_updatedByIdToUsers")
  Users_Users_createdByIdToUsers       Users?         @relation("Users_createdByIdToUsers", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Users_Users_createdByIdToUsers Users[]        @relation("Users_createdByIdToUsers")
  Users_Users_updatedByIdToUsers       Users?         @relation("Users_updatedByIdToUsers", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Users_Users_updatedByIdToUsers Users[]        @relation("Users_updatedByIdToUsers")
  UsersOnRoles                         UsersOnRoles[]

  @@schema("security")
}

model UsersOnRoles {
  userId Int
  roleId Int
  Roles  Roles @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Users  Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, roleId])
  @@index([roleId], map: "IX_UsersOnRoles_roleId")
  @@index([userId], map: "IX_UsersOnRoles_userId")
  @@schema("security")
}
